SHELL = /bin/bash

####################################
# 問題ごとに変わる設定

USER := {{ ssh_user }}
SERVERS := isu1 isu2 isu3

GO := /home/$(USER)/local/golang/bin/go

BIN_NAME := isupipe
SERVICE_NAME := $(BIN_NAME)-go.service
BUILD_CMD := make build	 # $(GO) build -o $(BIN_NAME)

ENV_FILE_NAME := env.sh
ENV_FILE_PATH := /home/$(USER)/$(ENV_FILE_NAME)
####################################

####################################
# 実行時のパラメータ

## デプロイするブランチ(default: main)
B ?= main
####################################

APP_DIR := {{ webapp_dir }}/go
NGINX_DIR := {{ nginx_dir }}
MYSQL_DIR := {{ mysql_dir }}
SYSTEMD_DIR := {{ systemd_dir }}
NGINX_LOG := /var/log/nginx/access.log
MYSQL_SLOW_LOG := /var/log/mysql/mysql-slow.log
MYSQL_SERVICE := {{ mysql_service }}

TIME = $(shell TZ=JST-9 date +"%H%M")
HOSTNAME = $(shell hostname)
#### analysis
.PHONY: alp
alp:
	sudo alp ltsv --file ${NGINX_LOG} --config /opt/pprotein/data/alp.yml | tee /tmp/alp-$(TIME).txt

.PHONY: slp
slp:
	sudo slp my --file ${MYSQL_SLOW_LOG} --config /opt/pprotein/data/slp.yml --dump /tmp/slp-$(TIME).yaml | tee /tmp/slp-$(TIME).txt

.PHONY: set-alp-group
alp-group:
	cat $(APP_DIR)/main.go | grep -E '"(/[^/]+)+"' | sed -r 's#^.*"((/[^/]+)+)".*$$#  - \^\1\$$#g' | sed -r 's#(:[^/]+)#\[\^\/\]\+#g' | sort -r | uniq | sudo tee -a /opt/pprotein/data/alp.yml

.PHONY: pt
pt:
	sudo pt-query-digest ${MYSQL_SLOW_LOG} | tee /tmp/pt-$(TIME).txt


#### deploy
.PHONY: deploy
deploy: git-pull reset-log deploy-app deploy-nginx deploy-mysql

.PHONY: git-pull
git-pull:
	git fetch && \
	git checkout $(B) && \
	git merge origin/$(B)

.PHONY: reset-log
reset-log:
	sudo truncate -s 0 $(NGINX_LOG)
	sudo truncate -s 0 $(MYSQL_SLOW_LOG)

.PHONY: deploy-app
deploy-app:
	sudo cp ./$(SERVICE_NAME) $(SYSTEMD_DIR) && \
	sudo cp ./$(ENV_FILE_NAME) $(ENV_FILE_PATH) && \
	( [ ! -e "./$(HOSTNAME)/$(SERVICE_NAME)" ] || sudo cp ./$(HOSTNAME)/$(SERVICE_NAME) $(SYSTEMD_DIR) ) && \
	( [ ! -e "./$(HOSTNAME)/$(ENV_FILE_NAME)" ] || sudo cp ./$(HOSTNAME)/$(ENV_FILE_NAME) $(ENV_FILE_PATH) ) && \
	cd $(APP_DIR) && \
	$(BUILD_CMD) && \
	sudo systemctl daemon-reload && \
	sudo systemctl restart $(SERVICE_NAME)

.PHONY: deploy-nginx
deploy-nginx:
	sudo cp -rf ./nginx/* $(NGINX_DIR)/ && \
	( [ ! -e "./$(HOSTNAME)/nginx" ] || sudo cp -rf ./$(HOSTNAME)/nginx/* $(NGINX_DIR) ) && \
	sudo systemctl restart nginx

.PHONY: deploy-mysql
deploy-mysql:
	sudo cp -rf ./mysql/* $(MYSQL_DIR)/ && \
	( [ ! -e "./$(HOSTNAME)/mysql" ] || sudo cp -rf ./$(HOSTNAME)/mysql/* $(MYSQL_DIR) ) && \
	sudo systemctl restart $(MYSQL_SERVICE)


#### initialize
.PHONY: initialize copy-all copy-nginx copy-mysql copy-systemd copy-env

initialize: copy-all create-server-dir

copy-all: copy-nginx copy-mysql copy-systemd copy-env

copy-nginx:
	sudo cp -rf $(NGINX_DIR) ./nginx
	sudo chown $(USER) -R ./nginx
	sudo cp -rf $(NGINX_DIR) $(NGINX_DIR).bak

copy-mysql:
	sudo cp -rf $(MYSQL_DIR) ./mysql
	sudo chown $(USER) -R ./mysql
	sudo cp -rf $(MYSQL_DIR) $(MYSQL_DIR).bak

copy-systemd:
	sudo cp $(SYSTEMD_DIR)/$(SERVICE_NAME) ./
	sudo cp -rf $(SYSTEMD_DIR)/${SERVICE_NAME} $(SYSTEMD_DIR)/${SERVICE_NAME}.bak

copy-env:
	sudo cp $(ENV_FILE_PATH) ./
	sudo cp -rf $(ENV_FILE_PATH) $(ENV_FILE_PATH).bak

# サーバーごとのディレクトリを作成して .gitkeep を作成
KEEP_FILES := $(SERVERS:=/.gitkeep)
create-server-dir: $(KEEP_FILES)

$(KEEP_FILES):
	mkdir -p $(@D) && touch $@
